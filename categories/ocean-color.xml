<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Erdem Karaköylü 's DS corner (Posts about ocean color)</title><link>https://madhatter106.github.io/</link><description></description><atom:link href="https://madhatter106.github.io/DataScienceCorner/categories/ocean-color.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 16 Jul 2019 14:53:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Bayesian Approach to Chlorophyll Estimation from Satellite Remote Sensing</title><link>https://madhatter106.github.io/DataScienceCorner/posts/bayesian-approach-to-chlorophyll-estimation-from-satellite-remote-sensing/</link><dc:creator>Erdem Karaköylü</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This post describes the use of bayesian polynomial regression to estimate chlorophyll from remote sensing reflectance; the output is contrasted to that obtained via the frequentist ordinary least squares regression.&lt;/p&gt;
&lt;p&gt;Chlorophyll is estimated from ocean color remote sensing data  using one of two main types of algorithms; semi-analytical or empirical. The latter is a polynomial model, where the input is a ratio of bands and the coefficients are obtained via ordinary least squares fitting. These models are usually more successful than their semi-analytical counterparts and as a result are at the forefront of the operational algorithmic arsenal used by the Ocean Biology Processing Group at NASA Goddard. &lt;/p&gt;&lt;p&gt;&lt;a href="https://madhatter106.github.io/DataScienceCorner/posts/bayesian-approach-to-chlorophyll-estimation-from-satellite-remote-sensing/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>bayesian regression</category><category>chlorophyll</category><category>ocean color</category><category>pymc3</category><guid>https://madhatter106.github.io/DataScienceCorner/posts/bayesian-approach-to-chlorophyll-estimation-from-satellite-remote-sensing/</guid><pubDate>Mon, 10 Apr 2017 17:41:55 GMT</pubDate></item><item><title>Getting the NASA bio-Optical Marine Algorithm Dataset (NOMAD) into a Pandas DataFrame</title><link>https://madhatter106.github.io/DataScienceCorner/posts/getting-nomadata-into-a-pandas-dataframe/</link><dc:creator>Erdem Karaköylü</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, I'm going to briefly describe how a I download the &lt;a href="https://seabass.gsfc.nasa.gov/wiki/NOMAD"&gt;NASA bio-Optical Marine Algorithm Dataset or NOMAD&lt;/a&gt; created for algorithm development, extract the data I need and store it all neatly in a Pandas DataFrame. Here I use the latest dataset, NOMAD v.2, created in 2008.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://madhatter106.github.io/DataScienceCorner/posts/getting-nomadata-into-a-pandas-dataframe/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>chlorophyll</category><category>ocean color</category><category>pandas</category><guid>https://madhatter106.github.io/DataScienceCorner/posts/getting-nomadata-into-a-pandas-dataframe/</guid><pubDate>Wed, 15 Mar 2017 18:10:25 GMT</pubDate></item><item><title>XARRAY &amp; GEOVIEWS A new perspective on oceanographic data - part II</title><link>https://madhatter106.github.io/DataScienceCorner/posts/xarray-geoviews-a-new-perspective-on-oceanographic-data-part-ii/</link><dc:creator>Erdem Karaköylü</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In a &lt;a href="https://madhatter106.github.io/DataScienceCorner/posts/xarray-geoviews-a-new-perspective-on-oceanographic-data-part-i/"&gt;previous post&lt;/a&gt;, I introduced xarray with some simple manipulation and data plotting. In this super-short post, I'm going to do some more manipulation, using multiple input files to create a new dimension, reorganize the data and store them in multiple output files. All but with a few lines of code.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://madhatter106.github.io/DataScienceCorner/posts/xarray-geoviews-a-new-perspective-on-oceanographic-data-part-ii/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>jupyter</category><category>ocean color</category><category>xarray</category><guid>https://madhatter106.github.io/DataScienceCorner/posts/xarray-geoviews-a-new-perspective-on-oceanographic-data-part-ii/</guid><pubDate>Mon, 20 Feb 2017 19:30:43 GMT</pubDate></item><item><title>XARRAY &amp; GEOVIEWS A new perspective on oceanographic data - part I</title><link>https://madhatter106.github.io/DataScienceCorner/posts/xarray-geoviews-a-new-perspective-on-oceanographic-data-part-i/</link><dc:creator>Erdem Karaköylü</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;With this post I explore an alternative to ol' numpy; &lt;a href="http://xarray.pydata.org/en/stable/index.html"&gt;xarray&lt;/a&gt;. Numpy is still running under the hood but this very handy library applies the &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt; concept of labeled dimension to large N-dimension arrays prevalent in scientific computing. The result is an ease of manipulation of dimensions without having to guess or remember what they correspond to. Moreover, xarray plays nicely with two other relatively new libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dask.pydata.org/en/latest/"&gt;dask&lt;/a&gt;, which enables out of core computation so that memory availability becomes much less an issue with large data sets; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://geo.holoviews.org/"&gt;GeoViews&lt;/a&gt;, a library sitting on top of &lt;a href="http://holoviews.org/"&gt;HoloViews&lt;/a&gt;. The latter eases the burden of data visualization by offering an unusual approach that does away with step-by-step graphical coding and allows the user to concentrate how the data organization instead. This results in a substantial reduction code written, which makes data analysis much cleaner and less bug-prone. GeoViews sits on top of the visualization package HoloViews, with an emphasis on geophysical data. It's also my first good-bye to the aging (10+ years) matplotlib library. It'll still be handy now and then, but it's time to try new things. &lt;p&gt;&lt;a href="https://madhatter106.github.io/DataScienceCorner/posts/xarray-geoviews-a-new-perspective-on-oceanographic-data-part-i/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Jupyter notebook</category><category>ocean color</category><category>xarray</category><guid>https://madhatter106.github.io/DataScienceCorner/posts/xarray-geoviews-a-new-perspective-on-oceanographic-data-part-i/</guid><pubDate>Mon, 20 Feb 2017 16:16:55 GMT</pubDate></item></channel></rss>